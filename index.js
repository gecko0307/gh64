#!/usr/bin/env node

const template = require("es6-template-strings");
const compile = require("es6-template-strings/compile");
const resolveToString = require("es6-template-strings/resolve-to-string");
const config = require("config");
const fs = require("fs");  
const util = require("util");
const path = require("path");

function validateConfigValue(config, key, type, defaultValue, specification, checkerFunc) {
	var result, ok;
	result = defaultValue;
	if (config.has(key)) {
		var value = config.get(key);
		ok = true;
	
		if (typeof value != type) ok = false;
		else if (!checkerFunc(value)) ok = false;
	
		if (ok) result = value;
		else console.error(
			"Warning: bad value for key \"" + key + "\": " + value + 
			"\nSupported values are " + specification + 
			". Using default value: " + defaultValue);
	}

	return result;
}

function processFont(configSection) {
	var fontConfig = config.get(configSection);

	const fontFamily = validateConfigValue(fontConfig, "fontFamily", "string", "", "font names", function(value){
		return value.length > 0;
	});
	
	const fontFile = validateConfigValue(fontConfig, "fontFile", "string", "", "valid TTF font filenames", function(value){
		return value.length > 0;
	});

	const whitelist = validateConfigValue(fontConfig, "whitelist", "string", "", "Unicode characters", function(value){
		return value.length > 0;
	});

	const cssTemplateFilename = validateConfigValue(fontConfig, "cssTemplate", "string", "font.template.css", "valid css filenames", function(value){
		return value.length > 0;
	});

	function strToHex(str) {
		var result = "";
		for (var i = 0; i < str.length; i++) {
		  result += "U+" + str.charCodeAt(i).toString(16) + ",";
		}
		return result;
	}

	const glyphhanger = "glyphhanger";
	const commandTemplate = "%s --whitelist=%s --formats=woff --subset=%s";
	const cssTemplate = compile(fs.readFileSync(cssTemplateFilename, "utf8"));
	const command = util.format(commandTemplate, glyphhanger, strToHex(whitelist), fontFile);

	console.log(command);

	require("child_process").execSync(command, (err, stdout, stderr) => {
		if (err) {
			return console.log(err);
		}
	});
	
	var woffFile = util.format("%s-subset.woff", path.parse(fontFile).name);
	var woffData = fs.readFileSync(woffFile);
	var woffDataBase64 = woffData.toString("base64");
	var css = resolveToString(cssTemplate, {font_family: fontFamily, font_data: woffDataBase64});
	
	return css;
}

const comment = "/* Generated by gh64.js */\n";

function main() {
	var css = comment;
	for (var section in config) {
		if (config.hasOwnProperty(section))
			css += processFont(section);
	}

	fs.writeFile("fonts.css", css, function(err) {
		if (err)
			return console.log(err);
		else
			console.log("Success!");
	});
}

main();
